services:
  postgres:
    image: postgres:15
    container_name: trucking_eld_db_prod
    environment:
      POSTGRES_DB: trucking_eld
      POSTGRES_USER: trucking_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trucking_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trucking_user -d trucking_eld"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: trucking_eld_backend_prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://trucking_user:${POSTGRES_PASSWORD}@postgres:5432/trucking_eld
      - OPENROUTE_API_KEY=${OPENROUTE_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - backend_static_prod:/app/staticfiles
      - backend_media_prod:/app/media
    ports:
      - "8000:8000"
    networks:
      - trucking_network
    command: gunicorn trucking_eld.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      target: production
    container_name: trucking_eld_frontend_prod
    ports:
      - "3000:3000"
    networks:
      - trucking_network
    environment:
      - REACT_APP_API_URL=https://your-domain.com
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data_prod:
  backend_static_prod:
  backend_media_prod:

networks:
  trucking_network:
    driver: bridge